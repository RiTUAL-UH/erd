









 Rubular (http://www.rubular.com/) is also very helpful. 




 I find NB to be quite good for both plain Ruby, and Rails development. 









 Here's the irony: A good programmer will write more and better test code because they are more aware of what could possibly go wrong; however their code already reflects their awareness of those potential problems, and therefore while the tests help, they are in a way a double-check for something that they've already well covered in their code.  On the other hand, a poor or novice programmer will have less awareness of what could possibly go wrong, and therefore won't account for those things in their code, but because they're unaware of them, won't write proper tests that would catch those potential problems. So in either case, the helpfulness of tests is limited; the former because their code is generally good enough without the tests, and the latter because their knowledge is too poor to write good tests, and once they're knowledge increases their code gets better and therefore their need for tests decreases.

That doesn't mean tests are not useful. Where I believe they shine is not in catching defective code, but in making sure that a change made to one piece of code doesn't break something somewhere else that may seem unrelated (or that you didn't remember was related), without having to "manually" test the app by running through all the steps. The larger and more complex the app, the more important this becomes and saves countless hours of checking to see if everything still works. 

 












































 +1 Lets focus on more important things. 




 Datamapper (http://datamapper.rubyforge.org/) is promising too. 




 +1 




 If the time that you saved writing significantly shorter but more obtuse code is then lost when trying to read that code later (or someone else trying to read the code), then you didn't save any time.  





























 Oh, well. I guess I'd better stop using Ruby then. It was fun while it lasted.

Seriously though, I think Ruby/Python comparisons are unhelpful. Both are good, complete, mature languages, similar, but different. They both have good web frameworks. Some programmers seem to "click" with one approach more than the other, and that's natural too--our brains don't all work the same. A programmer with experience in one who "tries out" the other will probably be disappointed, and while they can have a helpful fresh perspective and spot issues that need to be corrected, many of their negative reactions generally result from a lack of experience with the new language and familiarity with the old (and therefore largely irrelevant).

 









 Looks very useful. Beast (http://beast.caboo.se/) is my favorite Rails forum (and Mephisto my favorite blogging system). 
























 Completely agree with you on the plugins. There are quite a few plugins that are much more widely used (and useful) than a basic admin interface.  




 Does *anyone* still use Windows?  




 Nice to see a comparison that's not slanted or flame-throwing.

Unfortunately, while the presentation prominently features the Admin advantage from Django, it fails to mention that AjaxScaffold (and several others) provide similar (or more) functionality for Rails. Having said that, most sites need a more customized Admin interface than provided by either Django or AjaxScaffold and the like, so the advantage provided by either is more likely to be leveraged only while prototyping or as a "extra". 
























 As far as a beginner's programming language, I think Ruby is better than PHP. I've found Ruby easy enough for my 9 year old daughter to learn and write programs in. PHP handicaps you by not forcing you to think in an object oriented fashion, which you'll have to learn eventually anyway. PHP is nice for putting up a quick webpage (and certainly easier to deploy than Ruby), but doesn't provide a solid programming foundation (which it was never intended for anyway). Ruby is very well thought-out and structured. 




 words = %w(zero one two three four five six seven eight nine)

(it's nice not to have to hassle with all the quote marks)

 





























 Coming in Rails 2.1. 









 This already existed as a well-used plugin, but I just discovered it as a gem, which is much more handy, IMO. 
























 I agree it's a good thing. I look at it as a commercial entity giving to the open-source community, while at the same time making money without which they wouldn't be able to host FOSS repos anyway.

 




 In gem v.1.0.x this is now "gem server" and it's helpfully listed in the list of commands. Prior to that, I had no idea that gem_server existed. Very useful. (use --daemon to run as daemon).

 









 IDEA: There have been a number of a "essential gem" posts, some linked on reddit. What would be cool is if someone made a simple "ruby-gem" site with all the available gems listed (users could submit ones), and the ability to vote and comment on the gems, or a "I use this" button to which ones are actually most used. Or maybe a "gems" section should be added to agilewebdevelopment.com.

Or, perhaps something like this exists and I haven't found it yet.

 
































































 I've seen a lot of Rails attachment-handling plugins, but this is the first one I've really liked.

 














 I meant to write MySQL but actually should have just dropped the My as the principles apply to other SQL DBs. 









 I've use NB a fair bit and find it to be pretty good; I haven't noticed any speed issues that slow me down. When it comes to debugging, while the breakpoints and variable inspect features are nice, what I really want is a full IRB session at a breakpoint (as you would get using ruby-debug from the command line). It's much faster to not only inspect variables using IRB, but you can then run commands on the data and see what's happening. It's on the feature list for NB, but not sure when the team will get to it. On the overall, kudos to the team (and it's free).  









 Very well put. I'm grateful for the time ruby-core puts into maintaining the language, but I hope they read this article and take some notes.

 




 There are a lot of tips and tricks on the web as to how to do things better/faster/cooler with Ruby/Rails. But there's not enough talk about how to make sure your site is secure with Ruby/Rails.

 









 another, perhaps easier way, is to run "gem server --daemon" which gives you access to all of your gem docs at localhost:8808 (or another port of your choice).  














 Start with: http://pine.fm/LearnToProgram/

 




 Why do you need squeak to teach them variables or OO programming? In teaching my daughter Ruby I just used real-world examples such as a Ball is an "object". It has "properties" such as the size and the color. There are certain things you can do with it, "methods", such as throw it or squish it. Variables are pigeonholes where you can put something you might need later. Some you can access only while in the same room (local), the same house (class), or from anywhere in the world (global). Etc. 




 It works :-) 

Hackety Hack is a great idea, and I've tried it. But it's only about halfway there and the author (brillant as he is) has lost interest and moved on to other tools (like the more brillant Shoes; now that's something you could use for child programming).  




 I agree. I've look and tried the various "child-oriented" programming options (Logo, KTurtle, Squeak, Scratch), and while it's true that it might get them interested in programming, it's better to introduce them to a language that they can build on to create more and better programs. (On the other hand, something like Scratch might be great for a 5 year old.) I think that it's best children learn the underlying tools rather than an automated tool that becomes a crutch (think Frontpage) that later limits you. I taught my 9-year-old daughter HTML and CSS and she hand-coded her own site from scratch. We then moved to Ruby on the console, and now she's 10 and we're porting the console-based Ruby program she wrote to a Web app with Rails, combining what she learned from HTML, CSS and Ruby. She has a perfect understanding of OO programming (Ruby is great for that), and is learning tools with which she can create "real" programs (or pick up another language like Python). 
























 Newsfire 




 http://apidock.com/ 
























 Speaking from experience, unless you're only translating one or two word phrases, or very simple and unambiguous phrases ("this is a pen"), Google translation, and similar online services, are useless as the translation is more likely to be wrong than right. 
 




 Advantages over cron that I can see:

* Access to your rails environment. (Okay, cron could call a rake task that loads the environment. But this is simpler as it's right in your rails project. No need to mess with editing crontab as root.)
* Ability to set up and/or trigger scheduled tasks dynamically based on user input.

 




 but changing IRB.conf[:PROMPT][:DEFAULT][:RETURN] to simply "%s" doesn't return the same results as irb_rocket (output on the same line rather than on the next line) I'm making the wrong change?

 




 Built fine for me on 10.5.6 




 Yes!! A big win for both projects, and most importantly, for the users. Congratulations. 




 This series of interviews needs a new title. Judging by the content so far, it's aimed squarely at beginners who know very little about Ruby, and mostly states stuff that's widely known from those who follow Ruby at all. That doesn't make it bad, it's just not about "little known ways" to "ruby mastery".  




 Thinkpad (Lenovo) is the best, IMO. But I've run Ubuntu on Dell and HP laptops too without problems. Forget about the company shipping with Ubuntu; just wipe the drive and install Ubuntu on top--or keep the Windows OS on there and dual-boot if you like. 

The main thing is to stay away from certain incompatible wireless and video chipsets. The safest is to pick a laptop that has Intel video and Intel wireless--they're almost certain to work with Ubuntu out of the box.  




 Personally, I'm happy with prototype and the Rails helpers. 




 Rails-Footnotes has more info, though I like the bar idea. Maybe the two could be combined. 

http://github.com/drnic/rails-footnotes

 














 Love the macros! Maybe I'll actually start writing tests for my apps now :-P

 
























