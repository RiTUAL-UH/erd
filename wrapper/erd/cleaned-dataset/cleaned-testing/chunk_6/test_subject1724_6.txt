
















































































































































 Just needs Nuno Bettencourt - Bumble Bee (Crash Landing) @ https://www.youtube.com/watch?v=yPDb0jSe-k8 


































































































































































































 I'm not sure myself. I would think that the chainmail would scratch the dice?  
























 OMG!  Combos!  






















































 Wut!  
































































 OMG! Hurry up I need that milk! Eat faster!  












































 /u/nuclearqtip breaks it down nicely @ http://www.reddit.com/r/programming/comments/3246da/amazon_elastic_file_system/cq7v9bo


 All of the others you've listed are either stateless REST services or places that want small pieces of structured data.
 
 EFS is NFSv4 which means:
 
 * Stateful (authenticate once, probably kerberos)
 * Mountable AND shareable (EBS can only be mounted in one place, S3 can be shared but not easily mounted)
 * Actual directories. No S3 doesn't have actual directories.
 * On-the-wire operations (I don't have to download the entire file to start reading it, and I don't have to do anything special on the client side to support this -- it just looks like a normal POSIX file handle)
 * Shared unix permission model (S3 doesn't do actual unix permissions. EBS does, but can't be shared).
 * Tolerant of network failures (UDP IIRC with plenty of retry logic) So I can actually open a file remotely, seek around all I like, and if there's a network problem it will just wait for the problem to resolve rather than forcing my client to deal with exceptions (configurable, of course).
 * Locking! Clients can actually correctly lock files. Let's see S3 do that.
 * Better caching than S3 -- clients can actually see what all of the other clients have been doing and make informed choices about whether to use a local cache or refresh the cache from the network.
 * Big files without the hassle (no multipart upload / multipart download, 64 bits for file size = potentially huge files)
 
 There's probably more I'm forgetting.
 
 EDIT
 
 Who says you don't have to mess around with mounts? EBS makes you mess around with mounts. Maybe not if you use a pre-made AMI, but if you go right now and add an extra EBS drive to an existing EC2 instance you definitely have to mess around with mounts. 














































































































































































 LOLOLOLOLOL hard at this one. Well done!  



































































































 Michael McCann - Icarus (Main Theme) https://www.youtube.com/watch?v=can0xuO9IvE 
























 :| 

































































































































 My head just exploded.  





























